generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role?     @relation(fields: [roleId], references: [id])
  roleId          String?   @db.ObjectId
  resetToken      String?   @unique
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Event relations
  createdEvents   Event[]   @relation("EventCreator")
  bookings        Booking[] @relation("UserBookings")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String               @unique
  description String?
  users       User[]
  permissions RolePermission[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Permission {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String               @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String     @db.ObjectId
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String     @db.ObjectId
  createdAt    DateTime   @default(now())

  @@unique([roleId, permissionId])
}

// Event Management Models
model Event {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String
  imageUrl    String?
  isPublished Boolean      @default(false)
  
  // Relations
  creator     User         @relation("EventCreator", fields: [creatorId], references: [id])
  creatorId   String       @db.ObjectId
  ticketTypes TicketType[]
  bookings    Booking[]
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TicketType {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  quantity    Int       // Total available tickets of this type
  remaining   Int       // Remaining tickets after bookings
  
  // Relations
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String    @db.ObjectId
  tickets     Ticket[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String
  totalAmount Float
  status      BookingStatus @default(PENDING)
  paymentId   String?   // Reference to external payment system
  
  // Relations
  user        User      @relation("UserBookings", fields: [userId], references: [id])
  userId      String    @db.ObjectId
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     String    @db.ObjectId
  tickets     Ticket[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Ticket {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber String   @unique
  
  // Relations
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String    @db.ObjectId
  ticketType  TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String    @db.ObjectId
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

